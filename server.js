require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const { OpenAI } = require('openai');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer');  // Importando o Puppeteer
const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.json());
app.use(cors()); // Permite requisi√ß√µes do front-end
app.use(express.static('public')); // Para servir arquivos est√°ticos

// Configura√ß√£o da API OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Fun√ß√£o para gerar treino e dieta com a API OpenAI
async function gerarTreinoEDieta(userData) {
  const prompt = `
  Voc√™ √© um especialista e expert em nutri√ß√£o, muscula√ß√£o, sa√∫de e treino. Baseado nos seguintes dados:

  ${userData.nome || "N√£o informado"}
  ${userData.idade || "N√£o informado"}
  ${userData.peso || "N√£o informado"}
  ${userData.altura || "N√£o informado"}
  ${userData.genero || "N√£o informado"}
  ${userData.objetivo || "N√£o informado"}
  ${userData.calorias || "N√£o informado"}
  ${userData.nivelAtividade || "N√£o informado"}
  ${userData.suplementos || "N√£o informado"}
  ${userData.agua || "N√£o informado"}
  ${userData.preferenciaTreino || "N√£o informado"}
  ${userData.nivelTreino || "N√£o informado"}
  ${userData.diasSemana ? userData.diasSemana.join(", ") : "N√£o informado"}

  Gere um plano de treino e dieta √∫nico, completo e personalizado, com dieta e treino realmente eficaz, baseado nos objetivos do usu√°rio.
  
  Sua resposta deve ter a seguinte estrutura de exemplo:
  Exemplo de resposta:
  
  üí™ PLANO DE TREINO (D√™ a melhor divis√£o e treino conforme os dias dispon√≠veis, prefer√™ncias e objetivo do usu√°rio)
  (exemplo: se s√≥ tem 1 dia, talvez s√≥ seja poss√≠vel fazer fullbody ou alguma rota√ß√£o)
    (exemplo: se s√≥ tem 1 dia, talvez s√≥ seja poss√≠vel fazer fullbody ou alguma rota√ß√£o)
    (exemplo: se s√≥ tem 2 dias, talvez um upper-lower)
    (exemplo: se tem 5 dias, j√° da pra divir em grupos musucalares melhor)
    (exemplo: se tem mais que 5 dias, j√° da pra divir em grupos musucalares melhor e distribuir melhor os descansos)

  üìÜ Dias Dispon√≠veis: 
  üéØ Objetivo:
  üí¶ √Ågua recomendada:

  1Ô∏è‚É£ Segunda-feira: Peito e Tr√≠ceps
   - Supino Reto: 4 s√©ries de 12 repeti√ß√µes.
   - Supino Inclinado: 3 s√©ries de 12 repeti√ß√µes.
   - Crucifixo: 2 s√©ries de 12 repeti√ß√µes.
   - Pulley Tr√≠ceps: 4 s√©ries de 12 repeti√ß√µes.
   - Tr√≠ceps Testa: 3 s√©ries de 10 repeti√ß√µes.

  2Ô∏è‚É£ Ter√ßa-feira: Pernas
   - Agachamento Livre: 4 s√©ries de 12 repeti√ß√µes.
   - Cadeira Extensora: 3 s√©ries de 15 repeti√ß√µes.

  3Ô∏è‚É£ Quarta-feira: Ombros
   - Desenvolvimento Ombros: 4 s√©ries de 10 repeti√ß√µes.
   - Eleva√ß√£o Lateral: 3 s√©ries de 12 repeti√ß√µes.

  4Ô∏è‚É£ Quinta-feira: Costas e B√≠ceps
   - Barra Fixa: 4 s√©ries de 8 repeti√ß√µes.
   - Remada Curvada: 3 s√©ries de 12 repeti√ß√µes.
   - Rosca Direta: 4 s√©ries de 10 repeti√ß√µes.
   - Martelo: 3 s√©ries de 12 repeti√ß√µes.

  5Ô∏è‚É£ Sexta-feira: Pernas
   - Agachamento Livre: 4 s√©ries de 12 repeti√ß√µes.
   - Cadeira Extensora: 3 s√©ries de 15 repeti√ß√µes.

  üí° Dica: d√™ uma dica para o plano de treino.


  ü•ó PLANO DE DIETA (Calcule a quantidade de refei√ß√µes ideal (n√£o precisa ser sempre 8, especialmente se o usu√°rio deseja emagrecer por exemplo) e todo o resto conforme as prefer√™ncias e objetivo do usu√°rio)
  (Mostre a quantidade de cada alimento em sua resposta, conforme o exemplo do caf√© da manh√£)
  üßæ Calorias Desejadas: 

  üìå Macros di√°rios 
  Calorias:  | Prote√≠na:  | Carboidrato:  | Gorduras:

  1Ô∏è‚É£ Caf√© da Manh√£ (650 kcal, 65g carb, 45g prot, 20g gord):
  - Omelete de 4 ovos (240g) com queijo cottage (30g).
  - Aveia (40g) com banana (100g) e mel (10g).
  - Suco natural de laranja (200ml).

  2Ô∏è‚É£ Lanche da Manh√£ (500 kcal, 50g carb, 35g prot, 15g gord):
  - Batata-doce cozida (150g).
  - Peito de frango grelhado (120g).

  3Ô∏è‚É£ Almo√ßo (900 kcal, 100g carb, 65g prot, 25g gord):
  - Arroz integral (150g) e feij√£o preto (100g).
  - Fil√© de peixe assado (150g) ou peito de frango.
  - Salada de folhas verdes (r√∫cula, alface, tomate) com azeite (10ml).

  4Ô∏è‚É£ Lanche da Tarde (600 kcal, 70g carb, 45g prot, 15g gord):
  - Shake proteico
  - Leite integral (200ml) + Whey Protein (30g) + Aveia (30g) + Banana (100g).

  5Ô∏è‚É£ Pr√©-Treino (350 kcal, 50g carb, 20g prot, 10g gord):
  - Pasta de amendoim (20g) com torradas integrais (2 unid).
  - Leite desnatado (150ml).

  6Ô∏è‚É£ P√≥s-Treino (450 kcal, 60g carb, 40g prot, 5g gord):
  - Shake de Whey Protein (30g) com √°gua de coco (200ml).
  - Banana (100g).

  7Ô∏è‚É£ Jantar (800 kcal, 90g carb, 55g prot, 20g gord):
  - Quinoa (150g) ou arroz integral.
  - Salm√£o grelhado (150g).
  - Br√≥colis e cenoura cozidos.

  8Ô∏è‚É£ Ceia (300 kcal, 15g carb, 25g prot, 10g gord):
  - Iogurte grego natural (200g).
  - Mix de castanhas (15g).


  üíä SUPLEMENTA√á√ÉO (caso o usu√°rio escolha usar suplementa√ß√£o, mostre uma se√ß√£o como essa de exemplo a ele, PERSONALIZADA conforme suas prefer√™ncias e objetivo)

  1Ô∏è‚É£ Whey Protein (30g)
  üìå Benef√≠cios: Recupera√ß√£o muscular, aumento da s√≠ntese proteica.
  üïê Tomar: P√≥s-treino ou no caf√© da manh√£.

  2Ô∏è‚É£ Creatina (5g)
  üìå Benef√≠cios: Aumenta for√ßa e resist√™ncia, melhora a recupera√ß√£o.
  üïê Tomar: Qualquer hor√°rio do dia, todos os dias.

  3Ô∏è‚É£ Albumina (30g)
  üìå Benef√≠cios: Prote√≠na de absor√ß√£o lenta, ideal para manter a s√≠ntese proteica √† noite.
  üïê Tomar: Antes de dormir ou no caf√© da manh√£.
  
  4Ô∏è‚É£ Multivitam√≠nico
  üìå Benef√≠cios: Supre defici√™ncias de vitaminas e minerais essenciais.
  üïê Tomar: Pela manh√£.
  
  5Ô∏è‚É£ BCAA (10g)
  üìå Benef√≠cios: Redu√ß√£o da fadiga muscular, melhora na recupera√ß√£o.
  üïê Tomar: Antes e depois do treino.

  6Ô∏è‚É£ √îmega-3 (1-2g)
  üìå Benef√≠cios: Reduz inflama√ß√µes, melhora a sa√∫de cardiovascular.
  üïê Tomar: Durante o almo√ßo.

  7Ô∏è‚É£ Glutamina (10g)
  üìå Benef√≠cios: Fortalece o sistema imunol√≥gico e melhora a recupera√ß√£o muscular.
  üïê Tomar: Antes de dormir.

  . Agora, conforme as informa√ß√µes e prefer√™ncias do usu√°rio monte sua pr√≥pria resposta √∫nica.
`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "system", content: prompt }],
      temperature: 0.6,
    });

    const planoTexto = response.choices[0].message.content || "Plano n√£o gerado corretamente";

    const plano = {
      nome: userData.nome || "N√£o informado",
      email: userData.email || "N√£o informado",
      idade: userData.idade || "N√£o informado",
      peso: userData.peso || "N√£o informado",
      altura: userData.altura || "N√£o informado",
      genero: userData.genero || "N√£o informado",
      objetivo: userData.objetivo || "N√£o informado",
      planop: planoTexto,  // A resposta do plano
    };

    return plano;
  } catch (error) {
    console.error("Erro ao processar resposta da OpenAI:", error);
    return { error: "Erro ao gerar plano" };
  }
}

// Fun√ß√£o para gerar PDF usando Puppeteer e preencher a p√°gina HTML
async function gerarPDF(plano, nomeArquivo) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  // Carregar o conte√∫do da p√°gina PLANOS.html
  const planFilePath = path.join(__dirname, 'Plano.html');
  await page.goto('file://' + planFilePath, { waitUntil: 'load' });

  // Passar o objeto `plano` corretamente para o contexto da p√°gina
  await page.evaluate((plano) => {
    const element = (selector) => document.querySelector(selector);
    console.log('Plano:', plano);  // Verifique os dados sendo passados
    
    if (element('#nome')) element('#nome').innerText = plano.nome || 'N√£o informado';
    if (element('#idade')) element('#idade').innerText = plano.idade || 'N√£o informado';
    if (element('#peso')) element('#peso').innerText = plano.peso || 'N√£o informado';
    if (element('#altura')) element('#altura').innerText = plano.altura || 'N√£o informado';
    if (element('#genero')) element('#genero').innerText = plano.genero || 'N√£o informado';
    if (element('#objetivo')) element('#objetivo').innerText = plano.objetivo || 'N√£o informado';
    if (element('#plano')) element('#plano').innerText = plano.planop || 'N√£o informado';
  }, plano);  // Passando o plano para o contexto da p√°gina

  // Gerar o PDF a partir do conte√∫do da p√°gina preenchida
  const pdfBuffer = await page.pdf({ format: 'A4', printBackground: true });

  await browser.close();

  // Salvar o PDF na pasta 'planos'
  const caminhoArquivo = path.join(__dirname, 'planos', nomeArquivo);
  fs.writeFileSync(caminhoArquivo, pdfBuffer);
  console.log(`PDF gerado e salvo em: ${caminhoArquivo}`);

  return caminhoArquivo;
}

// Fun√ß√£o para enviar e-mail com o PDF
async function enviarEmailComPDF(pdfPath, email, nomeArquivo) {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: 'Seu Plano Personalizado',
    text: 'Seu plano de dieta e treino foi gerado com sucesso! Baixe o PDF em anexo.',
    attachments: [
      {
        filename: nomeArquivo,
        path: pdfPath, // Usando o caminho do arquivo gerado
      },
    ],
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log('Plano enviado com sucesso!');
  } catch (error) {
    console.error('Erro ao enviar e-mail:', error);
  }
}

// Endpoint para gerar o plano de treino e dieta e enviar o PDF
app.post('/obter-dados', async (req, res) => {
  console.log("Dados recebidos:", req.body);  // Verifique os dados que est√£o sendo enviados
  const userData = req.body;

  // Supondo que gerarTreinoEDieta seja uma fun√ß√£o que gera o plano a partir dos dados do usu√°rio
  const plano = await gerarTreinoEDieta(userData);

  if (plano.error) {
    console.error("Erro no plano gerado:", plano.error);  // Log de erro
    return res.status(500).json({ message: plano.error });
  }

  console.log("Plano gerado com sucesso:", plano);  // Log do plano gerado

  try {
    // Gerar o PDF
    const nomeArquivo = `plano_${Date.now()}.pdf`;
    const pdfPath = await gerarPDF(plano, nomeArquivo);

    // Enviar o PDF por e-mail
    await enviarEmailComPDF(pdfPath, plano.email, nomeArquivo);

    res.status(200).json({ message: 'Plano gerado e enviado com sucesso!', caminho: pdfPath });
  } catch (error) {
    console.error('Erro ao salvar ou enviar o PDF:', error);
    res.status(500).json({ message: 'Erro ao salvar ou enviar o PDF.' });
  }
});

// Endpoint para listar arquivos na pasta 'planos'
app.get("/listar-planos", (req, res) => {
  const dir = path.join(__dirname, "planos");
  fs.readdir(dir, (err, files) => {
    if (err) {
      return res.status(500).send({ message: "Erro ao ler a pasta", error: err });
    }
    res.json(files); // Retorna os nomes dos arquivos na pasta
  });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});